{"pageProps":{"member":{"id":"kokisato","name":"Koki Sato","role":"SRE","bio":"piyo","avatarSrc":"/avatars/kokisato.png","sources":["https://zenn.dev/kou_pg_0131/feed"],"includeUrlRegex":"","twitterUsername":"koki_develop","githubUsername":"koki-develop","websiteUrl":"https://koki.me"},"postItems":[{"title":"【Terraform】CloudFront から S3 へのアクセス制御に Origin Access Control を利用する","contentSnippet":"CloudFront から S3 へのアクセス制御方法として新しく Origin Access Control (OAC) というものが発表されました。これにより従来の Origin Access Identity (OAI) によるアクセス制御は Legacy となりました。詳しくは次の記事をご参照ください。https://dev.classmethod.jp/articles/amazon-cloudfront-origin-access-control/Terraform の AWS Provider も本日リリースされた v4.29.0 から OAC をサポートしたので、...","link":"https://zenn.dev/kou_pg_0131/articles/tf-cloudfront-oac","isoDate":"2022-09-02T10:00:00.000Z","dateMiliSeconds":1662112800000,"authorName":"Koki Sato","authorId":"kokisato"},{"title":"CDK for Terraform の使い方まとめ","contentSnippet":"先日 CDK for Terraform が GA になりました。https://www.hashicorp.com/blog/cdk-for-terraform-now-generally-availableこの記事では CDK for Terraform の基本的な使い方をまとめます。TypeScript を使う前提で記述するため、他の言語を利用する場合は適宜読み替えてください。 CDK for Terraform とはhttps://www.terraform.io/cdktfCDK for Terraform を使うと使い慣れたプログラミング言語を使ってインフラの定...","link":"https://zenn.dev/kou_pg_0131/articles/cdk-for-terraform","isoDate":"2022-09-01T12:52:06.000Z","dateMiliSeconds":1662036726000,"authorName":"Koki Sato","authorId":"kokisato"},{"title":"データをヘブライ文字エンコード/デコードできる CLI ツールを作った","contentSnippet":"例えば画像などのバイナリデータを Base64 エンコードするとき、「Base64 ではなくヘブライ文字でエンコードできたらな」と思うことはありませんか？僕はありません。そんなときに使える CLI ツール hebr を作ったので、その紹介です。https://github.com/koki-develop/hebr インストールGo で作っているので go install でインストールできます。$ go install github.com/koki-develop/hebr/cmd/hebr@latest 使い方 エンコードhebr にヘブライ文字エンコードした...","link":"https://zenn.dev/kou_pg_0131/articles/hebr-introduction","isoDate":"2022-08-28T10:10:38.000Z","dateMiliSeconds":1661681438000,"authorName":"Koki Sato","authorId":"kokisato"},{"title":"Google 製 yaml フォーマッター「yamlfmt」を試してみる","contentSnippet":"Google 製の yamlfmt なるものを知ったので試しに触ってみました。https://github.com/google/yamlfmt インストールGo で作られてるので go install でインストールできます。$ go install github.com/google/yamlfmt/cmd/yamlfmt@latest 使い方yamlfmt を実行するだけで yaml ファイルを再帰的に探して ( **/*.{yaml,yml} ) フォーマットを実行します。$ yamlfmt例えばカレントディレクトリに次のような a.yaml ファイルがある場...","link":"https://zenn.dev/kou_pg_0131/articles/yamlfmt-usage","isoDate":"2022-08-21T12:56:12.000Z","dateMiliSeconds":1661086572000,"authorName":"Koki Sato","authorId":"kokisato"},{"title":"インフラもバックエンドもフロントエンドも Go で書いてみた","contentSnippet":"先日 CDK for Terraform が GA になりました。https://www.hashicorp.com/blog/cdk-for-terraform-now-generally-availableCDK for Terraform を使うことにより、 TypeScript や Go などといったプログラミング言語を使って Terraform エコシステムを利用したインフラの定義やプロビジョニングを行うことができます。「Go でインフラが書ける」と聞き、ふと思ったことがこちらです。というわけで書きました。 作ったものGoGoGohttps://go55.d...","link":"https://zenn.dev/kou_pg_0131/articles/gogogo-introduction","isoDate":"2022-08-12T09:17:29.000Z","dateMiliSeconds":1660295849000,"authorName":"Koki Sato","authorId":"kokisato"},{"title":"Argo CD に GitHub でログインできるようにする","contentSnippet":"検証環境Argo CD - v2.4.0kubectl - v1.24.2Kubernetes - v1.23.6 準備こちらの記事を参考に、 Kubernetes クラスタに Argo CD をインストールします。https://zenn.dev/kou_pg_0131/articles/argocd-getting-startedArgo CD API サーバーをポートフォワーディングしてアクセスできるようにしておきます。$ kubectl port-forward svc/argocd-server -n argocd 8080:443Forwardin...","link":"https://zenn.dev/kou_pg_0131/articles/argocd-sso-github","isoDate":"2022-06-19T12:42:33.000Z","dateMiliSeconds":1655642553000,"authorName":"Koki Sato","authorId":"kokisato"},{"title":"Kubernetes クラスタに Argo CD をインストールして動かす","contentSnippet":"仕事で Argo CD について勉強したので、基本的な使い方メモ。 検証環境Argo CD - v2.4.0Kind - v0.12.0kubectl - v1.24.2Kubernetes - v1.23.6Helm - v3.9.0 準備 Kubernetes クラスタを作成今回は kind を使ってローカルに Kubernetes クラスタを作成します。以下の設定ファイルを使ってクラスタを作成します。kind.yamlapiVersion: kind.x-k8s.io/v1alpha4kind: Clusternodes:- role: c...","link":"https://zenn.dev/kou_pg_0131/articles/argocd-getting-started","isoDate":"2022-06-19T11:00:00.000Z","dateMiliSeconds":1655636400000,"authorName":"Koki Sato","authorId":"kokisato"},{"title":"Remix で作成したアプリを Cloudflare Workers にデプロイする","contentSnippet":"Remix で作成したアプリを Cloudflare Workers にデプロイするまでの手順メモ。 検証環境node v16.15.0create-remix v1.5.1wrangler v1.19.12 前提Cloudflare アカウントが作成済Cloudflare Workers のサブドメインが設定済 手順 Remix アプリを作成なにはともあれとりあえず Remix アプリを作成する。まず最初に以下のコマンドを実行する。$ npx create-remix@latestアプリを作成する場所を聞かれる。ここでは remix-exam...","link":"https://zenn.dev/kou_pg_0131/articles/remix-on-cloudflare-workers","isoDate":"2022-05-22T12:24:58.000Z","dateMiliSeconds":1653222298000,"authorName":"Koki Sato","authorId":"kokisato"},{"title":"Tailwind CSS でツールチップを作る","contentSnippet":"Tailwind CSS だけでツールチップを作る実装のメモ。 作るもの特定の要素 ( 今回はボタン ) にマウスカーソルを合わせると表示されるツールチップ。デモ 検証環境Tailwind CSS v3.0.24 ソースコードhttps://github.com/koki-develop/tailwindcss-tooltip-example 実装今回は React で実装しますが、スタイルの設定には Tailwind CSS しか使っていません。React 以外の技術を利用している場合は適宜読み替えてください。 ボタンを作成するとりあえずボタンを...","link":"https://zenn.dev/kou_pg_0131/articles/tailwindcss-tooltip","isoDate":"2022-05-16T11:52:13.000Z","dateMiliSeconds":1652701933000,"authorName":"Koki Sato","authorId":"kokisato"},{"title":"create-react-app で作成したアプリを Vite に移行する","contentSnippet":"create-react-app で作成したアプリを vite で起動できるようにするまでの手順メモ。 検証環境create-reactp-app@4.0.3vite@2.7.1create-react-app は TypeScript テンプレートで作成したものを想定しています。パッケージマネージャには yarn を使用しているため、 npm を使用している場合は適宜読み替えてください。 手順 Vite をインストールVite と React 用のプラグインをインストールします。また、 react-scripts は不要になるためついでにアンインストールして...","link":"https://zenn.dev/kou_pg_0131/articles/cra-migrating-to-vite","isoDate":"2021-12-12T11:55:46.000Z","dateMiliSeconds":1639310146000,"authorName":"Koki Sato","authorId":"kokisato"},{"title":"【Node.js】Slack API を使用してメッセージを投稿する","contentSnippet":"@slack/web-api を使用して Slack にメッセージを投稿するサンプルコード。 検証環境node v14.7.5@slack/web-api v6.4.0 準備 アプリを作成以下の記事を参考にアプリを作成 ~ アクセストークンを発行 ~ アプリをチャンネルに追加するところまで実施する。https://zenn.dev/kou_pg_0131/articles/slack-api-post-message 必要なパッケージをインストール@slack/web-api をインストールする。$ npm i @slack/web-api サンプルコ...","link":"https://zenn.dev/kou_pg_0131/articles/js-slack-web-api-usage","isoDate":"2021-09-05T09:35:33.000Z","dateMiliSeconds":1630834533000,"authorName":"Koki Sato","authorId":"kokisato"},{"title":"Slack API を使用してメッセージを投稿する","contentSnippet":"Slack API を使用してアプリを作成 ~ メッセージを投稿するまでの手順メモ。 アプリを作成する「Slack API: Applications」 にアクセス。ワークスペースにログインしていない場合はする。Create New App をクリック。From scratch をクリック。任意のアプリ名を入力、ワークスペースを選択し、 Create App をクリック。これでアプリが作成される。 スコープを設定するOAuth & Permissions をクリック。ページの中ほどに Scopes セクションがあり、ここでアプリにスコープを設定する...","link":"https://zenn.dev/kou_pg_0131/articles/slack-api-post-message","isoDate":"2021-09-04T14:25:13.000Z","dateMiliSeconds":1630765513000,"authorName":"Koki Sato","authorId":"kokisato"},{"title":"【Go】slack-go を使用して Slack にメッセージを投稿する","contentSnippet":"Slack が公開しているパッケージを見つけて試してみたところ、結構使いやすくて便利だったのでメモ。https://github.com/slack-go/slack 準備 アプリを作成以下の記事を参考にアプリを作成 ~ アクセストークンを発行 ~ アプリをチャンネルに追加するところまで実施する。https://zenn.dev/kou_pg_0131/articles/slack-api-post-message slack-go をインストール$ go get -u github.com/slack-go/slack サンプルコードメッセージ投稿には *Cl...","link":"https://zenn.dev/kou_pg_0131/articles/go-slack-go-usage","isoDate":"2021-09-04T13:00:10.000Z","dateMiliSeconds":1630760410000,"authorName":"Koki Sato","authorId":"kokisato"},{"title":"【JavaScript】元の配列を変更せずに並び替えした配列を作る","contentSnippet":"検証環境node v14.17.5 元の配列を変更せずに並び替えした配列を作るArray.prototype.sort() は並び替えをした配列を返すが、実行した配列自身も変更する。const ary = [2, 4, 3, 5, 1];const sorted = ary.sort((a, b) => a - b);console.log(sorted); // => [ 1, 2, 3, 4, 5 ]// 元の配列まで変更されるconsole.log(ary); // => [ 1, 2, 3, 4, 5 ]元の配列は変更せずに並び替...","link":"https://zenn.dev/kou_pg_0131/articles/js-sort-array-without-changing-original-array","isoDate":"2021-08-23T10:36:48.000Z","dateMiliSeconds":1629715008000,"authorName":"Koki Sato","authorId":"kokisato"},{"title":"【JavaScript】配列を複製する","contentSnippet":"検証環境node v14.17.5 悪いパターン以下のように単純に新しい変数に入れ直して配列の複製を行おうとすると、新しい変数の変更が元の変数にも適用されてしまいます。const ary1 = [1, 2, 3];const ary2 = ary1;console.log(ary1); // => [ 1, 2, 3 ]console.log(ary2); // => [ 1, 2, 3 ]// ary2 の要素を変更するary2[0] = 4;console.log(ary2); // => [ 4, 2, 3 ]// ary1 ...","link":"https://zenn.dev/kou_pg_0131/articles/js-clone-array","isoDate":"2021-08-23T10:24:01.000Z","dateMiliSeconds":1629714241000,"authorName":"Koki Sato","authorId":"kokisato"},{"title":"【Javascript】複数のオブジェクトを結合する","contentSnippet":"検証環境node v14.17.5 Object.assign() を使用する方法const obj1 = { a: 1, b: 2, c: 3 };const obj2 = { d: 4, e: 5, f: 6 };Object.assign(obj1, obj2);console.log(obj1);// => { a: 1, b: 2, c: 3, d: 4, e: 5, f: 6 }同じキーがある場合は第二引数に渡したオブジェクトの値で上書きされる。const obj1 = { a: 1, b: 2, c: 3 };const obj2 = ...","link":"https://zenn.dev/kou_pg_0131/articles/js-merge-multiple-objects","isoDate":"2021-08-22T14:15:24.000Z","dateMiliSeconds":1629641724000,"authorName":"Koki Sato","authorId":"kokisato"},{"title":"【Git】コミット件数を確認する","contentSnippet":"検証環境git v2.33.0 コミット件数を確認するコマンド以下のコマンドで特定のリビジョンのコミット数を取得できるコマンド$ git rev-list --count {ブランチ名 or コミットハッシュ等} 例コマンド$ git rev-list --count main出力16 参考https://stackoverflow.com/questions/677436/how-do-i-get-the-git-commit-count","link":"https://zenn.dev/kou_pg_0131/articles/git-view-commit-count","isoDate":"2021-08-22T13:32:55.000Z","dateMiliSeconds":1629639175000,"authorName":"Koki Sato","authorId":"kokisato"},{"title":"【Git】自分が今いるブランチを確認する","contentSnippet":"検証環境git 2.32.0 自分が今いるブランチを確認するコマンドgit branch に --contains フラグを付けることで自分が今いるブランチが出力される。コマンド$ git branch --contains出力* main先頭の * が邪魔な場合は cut 等を使用するといい。コマンド$ git branch --contains | cut -d \" \" -f 2出力main 参考https://qiita.com/usamik26/items/8aa6c3aed4b9c7dba5ca","link":"https://zenn.dev/kou_pg_0131/articles/git-view-current-branch","isoDate":"2021-08-15T12:34:42.000Z","dateMiliSeconds":1629030882000,"authorName":"Koki Sato","authorId":"kokisato"},{"title":"【AWS CLI】リージョン一覧を出力する","contentSnippet":"検証環境aws-cli 2.2.29 有効になっているリージョンの一覧を出力するec2 describe-regions で有効になっているリージョンの一覧を出力できる。コマンド$ aws ec2 describe-regionsOptInStatus については後述。出力{    \"Regions\": [        {            \"Endpoint\": \"ec2.eu-north-1.amazonaws.com\",            \"RegionName\": \"eu-north-1\",            \"OptInS...","link":"https://zenn.dev/kou_pg_0131/articles/aws-cli-list-regions","isoDate":"2021-08-15T12:20:33.000Z","dateMiliSeconds":1629030033000,"authorName":"Koki Sato","authorId":"kokisato"},{"title":"【Ruby】AES 暗号化・復号","contentSnippet":"Ruby の標準ライブラリで AES 暗号化処理を実装する際のメモ。毎回違う暗号が生成されるので安心。 検証環境Ruby 2.7.3 サンプルコード 暗号化aes_encrypt.rbrequire 'openssl'require 'base64'# AES 暗号化# @param [String] plain_text 暗号化したい平文。# @param [String] password 好きなパスワード。# @param [String] bit 鍵の長さをビット数で指定。128, 192, 256が指定できる。基本的には256を指定しておけ...","link":"https://zenn.dev/kou_pg_0131/articles/ruby-aes-enc-dec","isoDate":"2021-08-03T11:37:56.000Z","dateMiliSeconds":1627990676000,"authorName":"Koki Sato","authorId":"kokisato"}]},"__N_SSG":true}